In a certain great city, whose glory touches the stars, the people have chosen new aldermen. After a long dispute over who would hold the city treasury and who would manage the city’s defences, the city council succeeded in electing a new mayor from their midst, and the new city council took control of the city. Its first focus was on one of the city’s most pressing problems, that of transportation.

Previous city councils had introduced a progressive citywide network of public transport, from fiacres and cabs of all kinds to boats and rafts, called Povozy I Drozky (PID for short). For example, residents could also use a network of shared carriages (the so-called Rekárka) as part of this system. However, despite all the efforts, it has so far not been possible to provide enough connections to travel between any two places in the city. The new city council would like to remedy this shortcoming as soon as possible and has called a special meeting to do so.

Since we must of course be mindful of the city’s coffers (and therefore the pockets of the aldermen), we need to strengthen the PID network as efficiently as possible. Each alderman has the right to make a proposal at the meeting to strengthen the network by adding specific carriage routes or other transport links, and the city council will then decide which proposal will be implemented. To do this, it is necessary to be able to decide exactly how the addition of the links in question will affect the current transport network. In addition, we would like to find this out quickly, as the councillors also have other things to worry about than just sitting in a council meeting all day.

So you get a map of the current state of the PID network in advance, and then for each proposal you have to quickly calculate how the addition of the connections will affect the connectivity of the transport network. To simplify the job (of the city council, not yours), connectivity is completely described by the number of areas. Two stops are in the same area, precisely when you can travel between them in both directions within the PID network.
Interface

Your task is to implement the class TrafficNetworkTester. The class must have a constructor with an argument of type Map which describes the current transportation network, and a method count_areas(new_connections) which computes the number of areas in the transportation network after adding the connections described in new_connections (in the same format as Map::connections, see below, except it can also introduce new stops). An area is an inclusion-wise maximal set of stops such that it is possible to get from every stop to every other stop and back.

An object of the Map class contains an attribute places listing the existing stops and an attribute connections listing pairs of stops with a direct connection in between them. All connections are one-way, there can be multiple connections between two stops and sometimes the starting and ending stop might be equal. Every stop is described by a data type Place. Place is implemented using std::string in the example data, however the real data use a more efficient implementation.

In the tests, the number of calls to the method count_areas significantly exceeds the total number of instances created. Note that copy constructor and assignment operator are not required.